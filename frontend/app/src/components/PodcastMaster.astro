<!-- Download Form Section -->
<div class="flex-shrink-0 p-4 border-b border-gray-200 bg-gray-50">
  <form id="downloadForm" class="space-y-3">
    <div>
      <input
        type="url"
        name="youtubeUrl"
        id="youtubeUrl"
        required
        class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
        placeholder="Add YouTube URL..."
      />
    </div>
    <button
      type="submit"
      id="downloadBtn"
      class="w-full px-3 py-2 bg-indigo-600 text-white text-sm font-medium rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed"
    >
      <svg
        id="downloadIcon"
        class="w-4 h-4 inline mr-2"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M12 4v16m8-8l-8 8-8-8"></path>
      </svg>
      <svg
        id="loadingIcon"
        class="w-4 h-4 mr-2 animate-spin hidden"
        fill="none"
        viewBox="0 0 24 24"
      >
        <circle
          class="opacity-25"
          cx="12"
          cy="12"
          r="10"
          stroke="currentColor"
          stroke-width="4"></circle>
        <path
          class="opacity-75"
          fill="currentColor"
          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
        ></path>
      </svg>
      <span id="downloadText">Add Podcast</span>
    </button>
  </form>

  <!-- Status message -->
  <div id="statusMessage" class="hidden mt-2 p-2 rounded text-sm"></div>
</div>

<!-- Podcast List Section -->
<div class="flex-1 overflow-y-auto">
  <div class="p-4">
    <h2 class="text-lg font-semibold text-gray-900 mb-4">Podcast Library</h2>
    <div id="podcastList" class="space-y-3">
      <div class="text-center text-gray-500 py-8">
        <svg
          class="w-12 h-12 mx-auto mb-4 text-gray-300"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3"
          ></path>
        </svg>
        <p>Loading podcasts...</p>
      </div>
    </div>
  </div>
</div>

<script>
  const podcastList = document.getElementById("podcastList");
  const form = document.getElementById("downloadForm");
  const downloadBtn = document.getElementById(
    "downloadBtn"
  ) as HTMLButtonElement;
  const downloadIcon = document.getElementById("downloadIcon");
  const loadingIcon = document.getElementById("loadingIcon");
  const downloadText = document.getElementById("downloadText");
  const statusMessage = document.getElementById("statusMessage");

  let selectedPodcast: string | null = null;

  function showStatus(message: string, type: "success" | "error" | "info") {
    if (!statusMessage) return;

    statusMessage.className = `mt-2 p-2 rounded text-sm ${
      type === "success"
        ? "bg-green-100 text-green-800"
        : type === "error"
          ? "bg-red-100 text-red-800"
          : "bg-blue-100 text-blue-800"
    }`;
    statusMessage.textContent = message;
    statusMessage.classList.remove("hidden");

    if (type === "success") {
      setTimeout(() => {
        statusMessage.classList.add("hidden");
      }, 3000);
    }
  }

  function setLoading(loading: boolean) {
    if (!downloadBtn || !downloadIcon || !loadingIcon || !downloadText) return;

    downloadBtn.disabled = loading;

    if (loading) {
      downloadIcon.classList.add("hidden");
      loadingIcon.classList.remove("hidden");
      downloadText.textContent = "Adding...";
    } else {
      downloadIcon.classList.remove("hidden");
      loadingIcon.classList.add("hidden");
      downloadText.textContent = "Add Podcast";
    }
  }

  function selectPodcast(filename: string) {
    // Remove previous selection
    document.querySelectorAll(".podcast-item").forEach((item) => {
      item.classList.remove("bg-indigo-50", "border-indigo-200");
      item.classList.add("border-gray-200");
    });

    // Select new item
    const selectedItem = document.querySelector(
      `[data-filename="${filename}"]`
    );
    if (selectedItem) {
      selectedItem.classList.add("bg-indigo-50", "border-indigo-200");
      selectedItem.classList.remove("border-gray-200");
    }

    selectedPodcast = filename;

    // Dispatch custom event to update details panel
    window.dispatchEvent(
      new CustomEvent("podcastSelected", {
        detail: { filename },
      })
    );
  }

  async function loadPodcasts() {
    if (!podcastList) return;

    try {
      const response = await fetch("http://localhost:8000/audio-files");
      const audioFiles = await response.json();

      if (audioFiles.length === 0) {
        podcastList.innerHTML = `
          <div class="text-center text-gray-500 py-8">
            <svg class="w-12 h-12 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3" />
            </svg>
            <p>No podcasts yet</p>
            <p class="text-sm mt-1">Add a YouTube URL above to get started</p>
          </div>
        `;
        return;
      }

      podcastList.innerHTML = audioFiles
        .map((file: { filename: string; path: string }, index: number) => {
          const title = file.filename.replace(".mp3", "").replace(/_/g, " ");
          const isFirst = index === 0;

          return `
          <div 
            class="podcast-item p-3 border rounded-lg cursor-pointer hover:bg-gray-50 transition-colors ${isFirst ? "bg-indigo-50 border-indigo-200" : "border-gray-200"}"
            data-filename="${file.filename}"
          >
            <h3 class="font-medium text-gray-900 text-sm mb-1 line-clamp-2">${title}</h3>
            <p class="text-xs text-gray-500 truncate">${file.filename}</p>
            <div class="flex items-center mt-2 text-xs text-gray-400">
              <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd" />
              </svg>
              Audio file
            </div>
          </div>
        `;
        })
        .join("");

      // Add click handlers
      document.querySelectorAll(".podcast-item").forEach((item) => {
        item.addEventListener("click", () => {
          const filename = item.getAttribute("data-filename");
          if (filename) {
            selectPodcast(filename);
          }
        });
      });

      // Auto-select first podcast
      if (audioFiles.length > 0 && !selectedPodcast) {
        selectPodcast(audioFiles[0].filename);
      }
    } catch (error) {
      console.error("Error loading podcasts:", error);
      podcastList.innerHTML = `
        <div class="text-center text-red-500 py-8">
          <p>Failed to load podcasts</p>
          <button onclick="loadPodcasts()" class="text-sm mt-2 text-indigo-600 hover:text-indigo-800">
            Try again
          </button>
        </div>
      `;
    }
  }

  // Download form handler
  form?.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target as HTMLFormElement);
    const youtubeUrl = formData.get("youtubeUrl") as string;

    if (!youtubeUrl) {
      showStatus("Please enter a YouTube URL", "error");
      return;
    }

    try {
      setLoading(true);
      showStatus("Downloading audio...", "info");

      const response = await fetch("http://localhost:8000/extract-audio", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ url: youtubeUrl }),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.detail || "Download failed");
      }

      showStatus(`Added: ${result.filename}`, "success");

      // Clear form
      (e.target as HTMLFormElement).reset();

      try {
        // Reload podcasts and select the new one
        await loadPodcasts();
        selectPodcast(result.filename);
      } catch (loadError) {
        console.error("Error loading podcasts after download:", loadError);
        showStatus(
          "Podcast added but failed to refresh the list. Please refresh the page.",
          "error"
        );
      }
    } catch (error) {
      console.error("Error:", error);
      showStatus(
        error instanceof Error
          ? error.message
          : "Failed to download. Please try again.",
        "error"
      );
    } finally {
      setLoading(false);
    }
  });

  // Load podcasts on page load
  loadPodcasts();

  // Initialize loading state
  setLoading(false);

  // Make functions available globally
  (window as any).loadPodcasts = loadPodcasts;
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
